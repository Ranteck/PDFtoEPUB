{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Project Repository and Dependencies",
      "description": "Initialize the project structure and install required dependencies including Docling, PyMuPDF, ebooklib, and OpenAI client",
      "details": "Create project structure with directories for src/, tests/, docs/. Install dependencies: pip install docling pymupdf ebooklib openai pdfminer.six pdfplumber typer pathlib. Setup virtual environment and requirements.txt. Initialize git repository with .gitignore for Python projects.",
      "testStrategy": "Verify all dependencies import successfully and check version compatibility. Test basic imports in Python REPL.",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Implement PDF Structure Extraction with Docling",
      "description": "Create the core PDF parsing module using Docling's DocumentConverter to extract text, images, tables and bounding boxes",
      "details": "Implement PDFExtractor class using DocumentConverter from docling. Extract layout structure with bbox coordinates, text content, images, and metadata. Handle both vectorial and scanned PDFs. Include fallback to pdfminer.six + pdfplumber for edge cases. Export structure to JSON format with page dimensions, elements array containing type, bbox, content, and references.",
      "testStrategy": "Test with sample PDFs of different types (vectorial, scanned, complex layouts). Verify JSON output contains all required fields: page_width_pt, page_height_pt, elements with bbox coordinates, and proper image references.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "in-progress",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Create Layout-Refiner LLM System Prompt",
      "description": "Implement the system prompt and LLM integration for converting extracted layout JSON to EPUB-ready XHTML fragments",
      "details": "Create LayoutRefinerLLM class with the specified system prompt. Implement OpenAI client integration using gpt-4o-mini model. Handle JSON input with page dimensions and elements array. Ensure output generates valid XHTML 5 fragments with absolute positioning, preserved line breaks, proper margins (72pt top/left/right, 60pt bottom), embedded images with alt tags, and page numbers in bottom-right corner.",
      "testStrategy": "Test with sample page JSON inputs. Validate generated XHTML is well-formed XML. Check that absolute positioning CSS is correctly applied and page numbers are positioned as specified.",
      "priority": "high",
      "dependencies": [
        2
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Image Extraction and Management",
      "description": "Extract images from PDF and manage them for EPUB packaging with proper referencing and format conversion",
      "details": "Create ImageExtractor class to extract images from PDF using PyMuPDF. Save images in supported EPUB formats (PNG, JPEG, SVG). Maintain aspect ratios and original quality. Create image reference mapping for XHTML embedding. Store images in OEBPS/Images directory structure. Handle image metadata and generate proper alt text when available from OCR.",
      "testStrategy": "Extract images from test PDFs and verify format compatibility. Check image quality preservation and proper file naming. Validate image references match between extraction and XHTML generation.",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "in-progress",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Create XHTML Page Generator",
      "description": "Implement the core logic to convert LLM-refined layout data into properly formatted XHTML pages with CSS styling",
      "details": "Create XHTMLGenerator class that processes LLM output and generates complete XHTML pages. Apply absolute positioning CSS for each element based on bbox coordinates. Implement proper XHTML 5 structure with semantic page breaks (role='doc-pagebreak'). Generate CSS for margins, fonts, and positioning. Handle text elements, images, and page numbers with proper styling.",
      "testStrategy": "Generate XHTML pages from sample layout data. Validate XHTML against EPUB 3 specifications. Test CSS positioning accuracy and verify page structure integrity.",
      "priority": "high",
      "dependencies": [
        3,
        4
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Font Extraction and Embedding",
      "description": "Extract fonts from PDF and embed them in EPUB with proper @font-face declarations",
      "details": "Create FontExtractor class using PyMuPDF to extract embedded fonts from PDF. Convert fonts to web-compatible formats (WOFF, TTF). Generate @font-face CSS declarations. Handle font licensing considerations and provide fallback fonts. Map original font names to embedded font references in CSS.",
      "testStrategy": "Extract fonts from PDFs with embedded fonts. Verify font files are valid and properly referenced in CSS. Test font rendering in EPUB readers.",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Create CSS Stylesheet Generator",
      "description": "Generate comprehensive CSS stylesheets for EPUB with page layouts, fonts, and positioning rules",
      "details": "Implement CSSGenerator class to create master stylesheet for EPUB. Include @page rules for margins, font-face declarations for embedded fonts, absolute positioning classes, and responsive design considerations. Handle page-specific styling and global layout rules. Generate CSS for page numbers, headers, footers, and content positioning.",
      "testStrategy": "Generate CSS from sample layout data. Validate CSS syntax and EPUB compatibility. Test stylesheet rendering across different EPUB readers.",
      "priority": "medium",
      "dependencies": [
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Implement EPUB Package Builder",
      "description": "Create the EPUB packaging system using ebooklib to assemble XHTML pages, CSS, images, and metadata",
      "details": "Create EPUBBuilder class using ebooklib. Assemble XHTML pages in correct order, embed CSS stylesheets, include extracted images in OEBPS/Images directory. Generate content.opf manifest, toc.ncx navigation, and proper spine ordering. Set EPUB metadata (title, language, identifier). Handle EPUB 3 specifications compliance.",
      "testStrategy": "Build complete EPUB from test data. Validate EPUB structure using epubcheck tool. Test EPUB opening in multiple readers (Calibre, Adobe Digital Editions, Thorium Reader).",
      "priority": "high",
      "dependencies": [
        5,
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Create QA Agent for Validation",
      "description": "Implement automated quality assurance to validate EPUB output against original PDF",
      "details": "Create QAAgent class to validate EPUB output. Check page count matches between PDF and EPUB. Verify image checksums and integrity. Validate no orphaned text outside bounding boxes. Check XHTML well-formedness and EPUB specification compliance. Implement automated tests for layout preservation and content accuracy.",
      "testStrategy": "Run QA validation on generated EPUBs. Compare page counts, image integrity, and text positioning. Verify all validation checks pass for sample documents.",
      "priority": "medium",
      "dependencies": [
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Implement Header/Footer Detection and Cleanup",
      "description": "Add intelligent detection and removal of repetitive headers and footers across pages",
      "details": "Create HeaderFooterCleaner class using TF-IDF comparison to identify repetitive text elements across pages. Detect common headers, footers, and page numbers that appear in similar positions. Implement configurable thresholds for automatic removal. Preserve intentional repetitive elements like chapter titles.",
      "testStrategy": "Test with documents containing repetitive headers/footers. Verify correct identification and removal without affecting content. Check preservation of legitimate repetitive elements.",
      "priority": "low",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Add OCR Fallback for Scanned PDFs",
      "description": "Implement OCR processing for scanned PDFs using Docling's auto-detection capabilities",
      "details": "Extend PDFExtractor to handle scanned PDFs with OCR processing. Use Docling's auto-detection to identify scanned content. Implement OCR text extraction with proper bounding box mapping. Handle mixed content (vectorial + scanned pages). Provide quality metrics for OCR accuracy and confidence scores.",
      "testStrategy": "Test with scanned PDF samples. Verify OCR text extraction accuracy and proper bbox mapping. Compare processing time and quality between vectorial and scanned documents.",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Create CLI Interface with Typer",
      "description": "Build command-line interface for the PDF to EPUB converter with configuration options",
      "details": "Implement CLI using typer library. Provide options for input PDF path, output EPUB path, layout mode (fixed/reflowable), margin settings, OCR enable/disable, and quality settings. Include progress indicators and verbose logging. Support batch processing and configuration files.",
      "testStrategy": "Test CLI with various parameter combinations. Verify all options work correctly and provide appropriate error messages. Test batch processing functionality.",
      "priority": "medium",
      "dependencies": [
        8,
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Implement LLM Response Caching",
      "description": "Add caching mechanism for LLM responses to improve performance and reduce costs",
      "details": "Create CacheManager class to cache LLM responses based on content hash. Hash text content and bbox coordinates to identify identical pages. Implement persistent cache storage using SQLite or file-based system. Add cache invalidation and cleanup mechanisms. Include cache statistics and hit rate monitoring.",
      "testStrategy": "Test caching with documents containing similar pages. Verify cache hits reduce LLM API calls. Check cache persistence across application restarts and validate hash collision handling.",
      "priority": "low",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Add Configuration Management System",
      "description": "Implement comprehensive configuration system for customizing conversion parameters",
      "details": "Create ConfigManager class to handle configuration files (YAML/JSON). Support settings for margins, fonts, LLM model selection, OCR parameters, image quality, and output format options. Implement configuration validation and default value handling. Allow per-project and global configuration files.",
      "testStrategy": "Test configuration loading and validation. Verify default values and override behavior. Check configuration file format validation and error handling.",
      "priority": "low",
      "dependencies": [
        12
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Create Comprehensive Test Suite and Documentation",
      "description": "Develop complete test coverage and user documentation for the PDF to EPUB converter",
      "details": "Create comprehensive test suite using pytest. Include unit tests for all classes, integration tests for full conversion pipeline, and performance benchmarks. Create user documentation with installation guide, usage examples, configuration reference, and troubleshooting guide. Add API documentation and developer setup instructions.",
      "testStrategy": "Achieve >90% test coverage. Verify all test cases pass consistently. Test documentation examples work correctly. Validate installation instructions on clean environments.",
      "priority": "medium",
      "dependencies": [
        14
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}